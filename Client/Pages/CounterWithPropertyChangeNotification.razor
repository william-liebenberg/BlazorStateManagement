@page "/counterWithPropertyChangeNotification"
@implements IDisposable

@* Inject our scoped CounterState and use it in the view / code section *@
@inject CounterState _state

<PageTitle>Counter with Observed State</PageTitle>

<MudText Typo="Typo.h3" GutterBottom="true">Counter with Observed State</MudText>
<MudText Class="mb-4">Current count: @_state.Value.Count</MudText>

@* Note: Due to user interaction, the page will refresh and show updated state value, even though we have not called StateHasChanged *@
<MudButton Color="Color.Primary" Variant="Variant.Filled" @onclick="IncrementCount">Click me</MudButton>
<MudButton Color="Color.Warning" Variant="Variant.Filled" @onclick="Reset">Reset</MudButton>

@code {

    protected override async Task OnInitializedAsync()
    {
        _state.PropertyChanged += async (s, p) => await InvokeAsync(StateHasChanged);

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _state.PropertyChanged -= async (s, p) => await InvokeAsync(StateHasChanged);
    }

    private void IncrementCount()
    {
        _state.Increment();
    }

    private void Reset()
    {
        _state.Reset();
    }
}
