@using static Client.Pages.CounterWithState

@* Inject the Coutner State to display the (non-updating) counter value *@
@inject Counter _counterState
@inject CounterState _couterStateObserver

<MudNavMenu>
    <MudNavLink Href="" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Home">Home</MudNavLink>
    <MudNavLink Href="counter" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Counter</MudNavLink>
    <MudNavLink Href="counterWithState" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Counter with State (@_counterState.Count)</MudNavLink>
    <MudNavLink Href="counterWithPropertyChangeNotification" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Counter with PropertyChangedNotification (@_couterStateObserver.Count)</MudNavLink>
    <MudNavLink Href="manyCounters" Match="NavLinkMatch.Prefix" Icon="@Icons.Material.Filled.Add">Many counters</MudNavLink>
</MudNavMenu>

@code {
    protected override async Task OnInitializedAsync()
    {
        _couterStateObserver.PropertyChanged += async (s, p) => await InvokeAsync(StateHasChanged);

        await base.OnInitializedAsync();
    }

    public void Dispose()
    {
        _couterStateObserver.PropertyChanged -= async (s, p) => await InvokeAsync(StateHasChanged);
    }
}